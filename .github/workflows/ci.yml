# .github/workflows/ci.yml
name: CI Pipeline - Test and Build Docker Image

on:
  push:
    branches: [ main ] # Trigger on push to main branch
  pull_request:
    branches: [ main ] # Trigger on pull requests targeting main

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Use latest checkout action

    - name: Set up Python
      uses: actions/setup-python@v5 # Use latest setup-python action
      with:
        python-version: '3.9' # Match your development/Dockerfile version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Add debugging steps before running tests
    - name: Debug - List files in root directory
      run: ls -la
    - name: Debug - List files in model directory
      run: ls -la model/
    - name: Debug - Print current working directory
      run: pwd
    - name: Debug - Check model file existence with Python
      run:  |
        python -c "from pathlib import Path; APP_DIR = Path('app/main.py').resolve().parent; ROOT_DIR = APP_DIR.parent; MODEL_PATH = ROOT_DIR / 'model' / 'simple_model.joblib'; print(f'Checking for model at: {MODEL_PATH}'); print(f'Model exists: {MODEL_PATH.is_file()}')"

    - name: Run tests with Pytest
      run: pytest tests/ # Run tests from the tests directory

  build-and-push-docker:
    name: Build and Push Docker Image
    needs: test # Run only if the 'test' job succeeds
    runs-on: ubuntu-latest
    # Only run this step on pushes to the main branch, not on pull requests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3 # Use latest buildx action

    - name: Login to Docker Hub
      uses: docker/login-action@v3 # Use latest login action
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }} # Use a Docker Hub Access Token

    - name: Build and push Docker image
      uses: docker/build-push-action@v5 # Use latest build-push action
      with:
        context: .
        file: ./Dockerfile
        push: true # Push the image to Docker Hub
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/deploy-ml-model:latest # Use your Docker Hub username and repo name
